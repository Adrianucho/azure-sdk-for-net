// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Graph.Rbac.Models;

namespace Azure.Graph.Rbac
{
    public partial class UsersClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal UsersRestClient RestClient { get; }
        /// <summary> Initializes a new instance of UsersClient for mocking. </summary>
        protected UsersClient()
        {
        }

        /// <summary> Initializes a new instance of UsersClient. </summary>
        public UsersClient(string tenantID, TokenCredential tokenCredential, RbacManagementClientOptions options = null)
        {
            options = options ?? new RbacManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new UsersRestClient(_clientDiagnostics, _pipeline, tenantID, apiVersion: options.Version);
        }

        /// <summary> Create a new user. </summary>
        /// <param name="parameters"> Parameters to create a user. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<User>> CreateAsync(UserCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateAsync(parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create a new user. </summary>
        /// <param name="parameters"> Parameters to create a user. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<User> Create(UserCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            return RestClient.Create(parameters, cancellationToken);
        }

        /// <summary> Gets user information from the directory. </summary>
        /// <param name="upnOrObjectId"> The object ID or principal name of the user for which to get information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<User>> GetAsync(string upnOrObjectId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(upnOrObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets user information from the directory. </summary>
        /// <param name="upnOrObjectId"> The object ID or principal name of the user for which to get information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<User> Get(string upnOrObjectId, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(upnOrObjectId, cancellationToken);
        }

        /// <summary> Updates a user. </summary>
        /// <param name="upnOrObjectId"> The object ID or principal name of the user to update. </param>
        /// <param name="parameters"> Parameters to update an existing user. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAsync(string upnOrObjectId, UserUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            return await RestClient.UpdateAsync(upnOrObjectId, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Updates a user. </summary>
        /// <param name="upnOrObjectId"> The object ID or principal name of the user to update. </param>
        /// <param name="parameters"> Parameters to update an existing user. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Update(string upnOrObjectId, UserUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            return RestClient.Update(upnOrObjectId, parameters, cancellationToken);
        }

        /// <summary> Delete a user. </summary>
        /// <param name="upnOrObjectId"> The object ID or principal name of the user to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string upnOrObjectId, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteAsync(upnOrObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a user. </summary>
        /// <param name="upnOrObjectId"> The object ID or principal name of the user to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string upnOrObjectId, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(upnOrObjectId, cancellationToken);
        }

        /// <summary> Gets list of users for the current tenant. </summary>
        /// <param name="filter"> The filter to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<User> ListAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<User>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<User>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets list of users for the current tenant. </summary>
        /// <param name="filter"> The filter to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<User> List(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<User> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<User> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNext(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a collection that contains the object IDs of the groups of which the user is a member. </summary>
        /// <param name="objectId"> The object ID of the user for which to get group membership. </param>
        /// <param name="securityEnabledOnly"> If true, only membership in security-enabled groups should be checked. Otherwise, membership in all groups should be checked. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<string> GetMemberGroupsAsync(string objectId, bool securityEnabledOnly, CancellationToken cancellationToken = default)
        {
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            async Task<Page<string>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.GetMemberGroupsAsync(objectId, securityEnabledOnly, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            async Task<Page<string>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.GetMemberGroupsNextPageAsync(nextLink, objectId, securityEnabledOnly, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a collection that contains the object IDs of the groups of which the user is a member. </summary>
        /// <param name="objectId"> The object ID of the user for which to get group membership. </param>
        /// <param name="securityEnabledOnly"> If true, only membership in security-enabled groups should be checked. Otherwise, membership in all groups should be checked. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<string> GetMemberGroups(string objectId, bool securityEnabledOnly, CancellationToken cancellationToken = default)
        {
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            Page<string> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.GetMemberGroups(objectId, securityEnabledOnly, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            Page<string> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.GetMemberGroupsNextPage(nextLink, objectId, securityEnabledOnly, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of users for the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<User> ListNextAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            async Task<Page<User>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<User>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of users for the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<User> ListNext(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            Page<User> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListNext(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<User> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
