// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Graph.Rbac.Models;

namespace Azure.Graph.Rbac
{
    public partial class DeletedApplicationsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DeletedApplicationsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of DeletedApplicationsClient for mocking. </summary>
        protected DeletedApplicationsClient()
        {
        }

        /// <summary> Initializes a new instance of DeletedApplicationsClient. </summary>
        public DeletedApplicationsClient(string tenantID, TokenCredential tokenCredential, RbacManagementClientOptions options = null)
        {
            options = options ?? new RbacManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new DeletedApplicationsRestClient(_clientDiagnostics, _pipeline, tenantID, apiVersion: options.Version);
        }

        /// <summary> Restores the deleted application in the directory. </summary>
        /// <param name="objectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Application>> RestoreAsync(string objectId, CancellationToken cancellationToken = default)
        {
            return await RestClient.RestoreAsync(objectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Restores the deleted application in the directory. </summary>
        /// <param name="objectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Application> Restore(string objectId, CancellationToken cancellationToken = default)
        {
            return RestClient.Restore(objectId, cancellationToken);
        }

        /// <summary> Hard-delete an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HardDeleteAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            return await RestClient.HardDeleteAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Hard-delete an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HardDelete(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            return RestClient.HardDelete(applicationObjectId, cancellationToken);
        }

        /// <summary> Gets a list of deleted applications in the directory. </summary>
        /// <param name="filter"> The filter to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Application> ListAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Application>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<Application>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of deleted applications in the directory. </summary>
        /// <param name="filter"> The filter to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Application> List(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Application> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<Application> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNext(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of deleted applications in the directory. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Application> ListNextAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            async Task<Page<Application>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<Application>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of deleted applications in the directory. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Application> ListNext(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            Page<Application> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListNext(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<Application> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
