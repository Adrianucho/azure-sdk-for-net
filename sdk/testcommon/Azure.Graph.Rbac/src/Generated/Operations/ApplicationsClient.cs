// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Graph.Rbac.Models;

namespace Azure.Graph.Rbac
{
    public partial class ApplicationsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ApplicationsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ApplicationsClient for mocking. </summary>
        protected ApplicationsClient()
        {
        }

        /// <summary> Initializes a new instance of ApplicationsClient. </summary>
        public ApplicationsClient(string tenantID, TokenCredential tokenCredential, RbacManagementClientOptions options = null)
        {
            options = options ?? new RbacManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new ApplicationsRestClient(_clientDiagnostics, _pipeline, tenantID, apiVersion: options.Version);
        }

        /// <summary> Create a new application. </summary>
        /// <param name="parameters"> The parameters for creating an application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Application>> CreateAsync(ApplicationCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateAsync(parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create a new application. </summary>
        /// <param name="parameters"> The parameters for creating an application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Application> Create(ApplicationCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            return RestClient.Create(parameters, cancellationToken);
        }

        /// <summary> Delete an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(applicationObjectId, cancellationToken);
        }

        /// <summary> Get an application by object ID. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Application>> GetAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get an application by object ID. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Application> Get(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(applicationObjectId, cancellationToken);
        }

        /// <summary> Update an existing application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PatchAsync(string applicationObjectId, ApplicationUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            return await RestClient.PatchAsync(applicationObjectId, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update an existing application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Patch(string applicationObjectId, ApplicationUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            return RestClient.Patch(applicationObjectId, parameters, cancellationToken);
        }

        /// <summary> Add an owner to an application. </summary>
        /// <param name="applicationObjectId"> The object ID of the application to which to add the owner. </param>
        /// <param name="url"> A owner object URL, such as &quot;https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd&quot;, where &quot;0b1f9851-1bf0-433f-aec3-cb9272f093dc&quot; is the tenantId and &quot;f260bbc4-c254-447b-94cf-293b5ec434dd&quot; is the objectId of the owner (user, application, servicePrincipal, group) to be added. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddOwnerAsync(string applicationObjectId, string url, CancellationToken cancellationToken = default)
        {
            return await RestClient.AddOwnerAsync(applicationObjectId, url, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add an owner to an application. </summary>
        /// <param name="applicationObjectId"> The object ID of the application to which to add the owner. </param>
        /// <param name="url"> A owner object URL, such as &quot;https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd&quot;, where &quot;0b1f9851-1bf0-433f-aec3-cb9272f093dc&quot; is the tenantId and &quot;f260bbc4-c254-447b-94cf-293b5ec434dd&quot; is the objectId of the owner (user, application, servicePrincipal, group) to be added. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddOwner(string applicationObjectId, string url, CancellationToken cancellationToken = default)
        {
            return RestClient.AddOwner(applicationObjectId, url, cancellationToken);
        }

        /// <summary> Remove a member from owners. </summary>
        /// <param name="applicationObjectId"> The object ID of the application from which to remove the owner. </param>
        /// <param name="ownerObjectId"> Owner object id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveOwnerAsync(string applicationObjectId, string ownerObjectId, CancellationToken cancellationToken = default)
        {
            return await RestClient.RemoveOwnerAsync(applicationObjectId, ownerObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove a member from owners. </summary>
        /// <param name="applicationObjectId"> The object ID of the application from which to remove the owner. </param>
        /// <param name="ownerObjectId"> Owner object id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveOwner(string applicationObjectId, string ownerObjectId, CancellationToken cancellationToken = default)
        {
            return RestClient.RemoveOwner(applicationObjectId, ownerObjectId, cancellationToken);
        }

        /// <summary> Update the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="value"> A collection of KeyCredentials. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateKeyCredentialsAsync(string applicationObjectId, IEnumerable<KeyCredential> value, CancellationToken cancellationToken = default)
        {
            return await RestClient.UpdateKeyCredentialsAsync(applicationObjectId, value, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="value"> A collection of KeyCredentials. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateKeyCredentials(string applicationObjectId, IEnumerable<KeyCredential> value, CancellationToken cancellationToken = default)
        {
            return RestClient.UpdateKeyCredentials(applicationObjectId, value, cancellationToken);
        }

        /// <summary> Update passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="value"> A collection of PasswordCredentials. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdatePasswordCredentialsAsync(string applicationObjectId, IEnumerable<PasswordCredential> value, CancellationToken cancellationToken = default)
        {
            return await RestClient.UpdatePasswordCredentialsAsync(applicationObjectId, value, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="value"> A collection of PasswordCredentials. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdatePasswordCredentials(string applicationObjectId, IEnumerable<PasswordCredential> value, CancellationToken cancellationToken = default)
        {
            return RestClient.UpdatePasswordCredentials(applicationObjectId, value, cancellationToken);
        }

        /// <summary> Gets an object id for a given application id from the current tenant. </summary>
        /// <param name="applicationID"> The application ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServicePrincipalObjectResult>> GetServicePrincipalsIdByAppIdAsync(string applicationID, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetServicePrincipalsIdByAppIdAsync(applicationID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets an object id for a given application id from the current tenant. </summary>
        /// <param name="applicationID"> The application ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServicePrincipalObjectResult> GetServicePrincipalsIdByAppId(string applicationID, CancellationToken cancellationToken = default)
        {
            return RestClient.GetServicePrincipalsIdByAppId(applicationID, cancellationToken);
        }

        /// <summary> Lists applications by filter parameters. </summary>
        /// <param name="filter"> The filters to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Application> ListAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Application>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<Application>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists applications by filter parameters. </summary>
        /// <param name="filter"> The filters to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Application> List(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Application> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<Application> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNext(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="applicationObjectId"> The object ID of the application for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<DirectoryObject> ListOwnersAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            async Task<Page<DirectoryObject>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListOwnersAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<DirectoryObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListOwnersNextPageAsync(nextLink, applicationObjectId, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="applicationObjectId"> The object ID of the application for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<DirectoryObject> ListOwners(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            Page<DirectoryObject> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListOwners(applicationObjectId, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<DirectoryObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListOwnersNextPage(nextLink, applicationObjectId, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<KeyCredential> ListKeyCredentialsAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            async Task<Page<KeyCredential>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListKeyCredentialsAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            async Task<Page<KeyCredential>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListKeyCredentialsNextPageAsync(nextLink, applicationObjectId, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<KeyCredential> ListKeyCredentials(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            Page<KeyCredential> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListKeyCredentials(applicationObjectId, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            Page<KeyCredential> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListKeyCredentialsNextPage(nextLink, applicationObjectId, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PasswordCredential> ListPasswordCredentialsAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            async Task<Page<PasswordCredential>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListPasswordCredentialsAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            async Task<Page<PasswordCredential>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListPasswordCredentialsNextPageAsync(nextLink, applicationObjectId, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PasswordCredential> ListPasswordCredentials(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            Page<PasswordCredential> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListPasswordCredentials(applicationObjectId, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            Page<PasswordCredential> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListPasswordCredentialsNextPage(nextLink, applicationObjectId, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of applications from the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Application> ListNextAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            async Task<Page<Application>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<Application>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of applications from the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Application> ListNext(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            Page<Application> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListNext(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<Application> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
