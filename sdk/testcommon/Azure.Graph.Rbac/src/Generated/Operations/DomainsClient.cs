// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Graph.Rbac.Models;

namespace Azure.Graph.Rbac
{
    public partial class DomainsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DomainsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of DomainsClient for mocking. </summary>
        protected DomainsClient()
        {
        }

        /// <summary> Initializes a new instance of DomainsClient. </summary>
        public DomainsClient(string tenantID, TokenCredential tokenCredential, RbacManagementClientOptions options = null)
        {
            options = options ?? new RbacManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new DomainsRestClient(_clientDiagnostics, _pipeline, tenantID, apiVersion: options.Version);
        }

        /// <summary> Gets a specific domain in the current tenant. </summary>
        /// <param name="domainName"> name of the domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Domain>> GetAsync(string domainName, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(domainName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a specific domain in the current tenant. </summary>
        /// <param name="domainName"> name of the domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Domain> Get(string domainName, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(domainName, cancellationToken);
        }

        /// <summary> Gets a list of domains for the current tenant. </summary>
        /// <param name="filter"> The filter to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Domain> ListAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Domain>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            async Task<Page<Domain>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of domains for the current tenant. </summary>
        /// <param name="filter"> The filter to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Domain> List(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Domain> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(filter, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            Page<Domain> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, filter, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
